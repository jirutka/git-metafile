name: Release
on:
  push:
    tags:
      - v[0-9]*

env:
  CRATE_NAME: git-metafile

jobs:
  build:
    name: Build for ${{ matrix.target }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    env:
      OUTPUT_DIR: target/${{ matrix.target }}/release
      STRIP: strip
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install llvm and set STRIP=llvm-strip
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install llvm
          echo 'STRIP=llvm-strip' >> $GITHUB_ENV

      - name: Install Rust stable for ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Resolve crate version and check git tag name
        run: |
          crate_version="$(cargo pkgid | cut -d '#' -f2 | grep -o '[^:]*$')"
          git_tag=${GITHUB_REF#refs/tags/}

          if [ "$git_tag" != "v$crate_version" ]; then
              printf '::error::%s\n' "Crate version ($crate_version) does not match git tag ($git_tag)"
              exit 1
          fi
          target=${{ matrix.target }}
          target=${target/-unknown/}
          target=${target%-musl*}
          echo "TARBALL_NAME=$CRATE_NAME-$crate_version-$target" | tee -a $GITHUB_ENV

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ !startsWith(matrix.target, 'x86_64') }}
          command: build
          args: --locked --release --target ${{ matrix.target }} --verbose

      - name: Strip release binary
        run: $STRIP $OUTPUT_DIR/$CRATE_NAME

      - name: Create tarball
        run: |
          mkdir $TARBALL_NAME
          install -m 755 $OUTPUT_DIR/$CRATE_NAME $TARBALL_NAME/
          install -m 644 LICENSE README.adoc $TARBALL_NAME/
          ls -la $TARBALL_NAME/
          tar -czf $TARBALL_NAME.tar.gz $TARBALL_NAME

      - name: Upload tarball to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tarballs
          path: ${{ env.TARBALL_NAME }}.tar.gz*
          if-no-files-found: error
          retention-days: 1

  publish-github:
    name: Publish to GitHub Releases
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download tarballs from artifacts
        uses: actions/download-artifact@v3

      - name: Generate checksums.txt
        run: shasum -a 256 *.tar.gz | tee checksums.txt
        working-directory: tarballs

      - name: Upload tarballs to Releases
        uses: softprops/action-gh-release@v1
        with:
          files: tarballs/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install asciidoctor and pandoc
        run: sudo apt-get install asciidoctor pandoc

      - name: Convert README to Markdown
        run: |
          printf '# Git Metafile\n\n' > README.md
          asciidoctor -b docbook -o - README.adoc \
              | pandoc -f docbook -t gfm --wrap=preserve --base-header-level=1 >> README.md

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --locked --verbose
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
